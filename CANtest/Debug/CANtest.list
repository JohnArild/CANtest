
CANtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c8  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  000104c8  2**0
                  CONTENTS
  4 .ARM          00000000  080004c0  080004c0  000104c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c0  080004c8  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a3a  00000000  00000000  000104f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002be  00000000  00000000  00010f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011002  00000000  00000000  000112b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000858  00000000  00000000  000222ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054e96  00000000  00000000  00022b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000779a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000dc  00000000  00000000  00077a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004a8 	.word	0x080004a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004a8 	.word	0x080004a8

08000170 <main>:
#include "../Inc/stm32f103x6.h"

void waitLoop(int loops);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	// Clock setup. External 8MHz.
	FLASH->ACR |= FLASH_ACR_LATENCY_1; //Set Flash Latency to 1 for 48MHz (2 for 72MHz)
 8000176:	4b75      	ldr	r3, [pc, #468]	; (800034c <main+0x1dc>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a74      	ldr	r2, [pc, #464]	; (800034c <main+0x1dc>)
 800017c:	f043 0302 	orr.w	r3, r3, #2
 8000180:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE; //Enable prefetch buffer
 8000182:	4b72      	ldr	r3, [pc, #456]	; (800034c <main+0x1dc>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a71      	ldr	r2, [pc, #452]	; (800034c <main+0x1dc>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_IOPDEN; // HSE is on PD0 and PD1
 800018e:	4b70      	ldr	r3, [pc, #448]	; (8000350 <main+0x1e0>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a6f      	ldr	r2, [pc, #444]	; (8000350 <main+0x1e0>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
	AFIO->MAPR &= ~(AFIO_MAPR_PD01_REMAP); // Set PD0 as OSC_In and PD1 as OSC_out
 800019a:	4b6e      	ldr	r3, [pc, #440]	; (8000354 <main+0x1e4>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a6d      	ldr	r2, [pc, #436]	; (8000354 <main+0x1e4>)
 80001a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80001a4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL6; // Set PLL to x6 for 48MHz (set to 9 for 72MHz)
 80001a6:	4b6a      	ldr	r3, [pc, #424]	; (8000350 <main+0x1e0>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	4a69      	ldr	r2, [pc, #420]	; (8000350 <main+0x1e0>)
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // Set APB1 divider to /2
 80001b2:	4b67      	ldr	r3, [pc, #412]	; (8000350 <main+0x1e0>)
 80001b4:	685b      	ldr	r3, [r3, #4]
 80001b6:	4a66      	ldr	r2, [pc, #408]	; (8000350 <main+0x1e0>)
 80001b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001bc:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC; // Set PREDIV1 as source for PLL
 80001be:	4b64      	ldr	r3, [pc, #400]	; (8000350 <main+0x1e0>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	4a63      	ldr	r2, [pc, #396]	; (8000350 <main+0x1e0>)
 80001c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001c8:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_HSEON; // Turn in external clock input
 80001ca:	4b61      	ldr	r3, [pc, #388]	; (8000350 <main+0x1e0>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a60      	ldr	r2, [pc, #384]	; (8000350 <main+0x1e0>)
 80001d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001d4:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR & RCC_CR_HSERDY)== RCC_CR_HSERDY)){;} // Wait for HSE to become ready
 80001d6:	4b5e      	ldr	r3, [pc, #376]	; (8000350 <main+0x1e0>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80001e2:	bf14      	ite	ne
 80001e4:	2301      	movne	r3, #1
 80001e6:	2300      	moveq	r3, #0
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d000      	beq.n	80001f0 <main+0x80>
 80001ee:	e7f2      	b.n	80001d6 <main+0x66>
	RCC->CR |= RCC_CR_PLLON; // Turn on PLL
 80001f0:	4b57      	ldr	r3, [pc, #348]	; (8000350 <main+0x1e0>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a56      	ldr	r2, [pc, #344]	; (8000350 <main+0x1e0>)
 80001f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001fa:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL for SYSCLOCK
 80001fc:	4b54      	ldr	r3, [pc, #336]	; (8000350 <main+0x1e0>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a53      	ldr	r2, [pc, #332]	; (8000350 <main+0x1e0>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_MCO_SYSCLK; // Select sysclock for clock input
 8000208:	4b51      	ldr	r3, [pc, #324]	; (8000350 <main+0x1e0>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a50      	ldr	r2, [pc, #320]	; (8000350 <main+0x1e0>)
 800020e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000212:	6053      	str	r3, [r2, #4]
	RCC->CR &= ~(RCC_CR_HSION); // Turn off internal clock
 8000214:	4b4e      	ldr	r3, [pc, #312]	; (8000350 <main+0x1e0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a4d      	ldr	r2, [pc, #308]	; (8000350 <main+0x1e0>)
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]

	//CAN setup. Using PA11 and PA12
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; //Turn on Port B
 8000220:	4b4b      	ldr	r3, [pc, #300]	; (8000350 <main+0x1e0>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a4a      	ldr	r2, [pc, #296]	; (8000350 <main+0x1e0>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN; // Enable CAN clock
 800022c:	4b48      	ldr	r3, [pc, #288]	; (8000350 <main+0x1e0>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	4a47      	ldr	r2, [pc, #284]	; (8000350 <main+0x1e0>)
 8000232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000236:	61d3      	str	r3, [r2, #28]
	GPIOA->CRH &= ~(0xF << GPIO_CRH_MODE12_Pos); //Clear
 8000238:	4b47      	ldr	r3, [pc, #284]	; (8000358 <main+0x1e8>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a46      	ldr	r2, [pc, #280]	; (8000358 <main+0x1e8>)
 800023e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000242:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE12_1; //Output mode, max speed 10 MHz.
 8000244:	4b44      	ldr	r3, [pc, #272]	; (8000358 <main+0x1e8>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a43      	ldr	r2, [pc, #268]	; (8000358 <main+0x1e8>)
 800024a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_1; // Alternate function output Push-pull
 8000250:	4b41      	ldr	r3, [pc, #260]	; (8000358 <main+0x1e8>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a40      	ldr	r2, [pc, #256]	; (8000358 <main+0x1e8>)
 8000256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800025a:	6053      	str	r3, [r2, #4]
	CAN1->BTR |= CAN_BTR_LBKM; // Debug mode
 800025c:	4b3f      	ldr	r3, [pc, #252]	; (800035c <main+0x1ec>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	4a3e      	ldr	r2, [pc, #248]	; (800035c <main+0x1ec>)
 8000262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000266:	61d3      	str	r3, [r2, #28]
	CAN1->MCR |= CAN_MCR_NART; // No retransmitt
 8000268:	4b3c      	ldr	r3, [pc, #240]	; (800035c <main+0x1ec>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a3b      	ldr	r2, [pc, #236]	; (800035c <main+0x1ec>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6013      	str	r3, [r2, #0]

	//Create CAN message for testing:
	uint16_t CAN_ID = 0x123;
 8000274:	f240 1323 	movw	r3, #291	; 0x123
 8000278:	81fb      	strh	r3, [r7, #14]
	uint32_t TIxR = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
	TIxR = (CAN_ID << 21); // move 11bit ID to bit 21-31
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	055b      	lsls	r3, r3, #21
 8000282:	60bb      	str	r3, [r7, #8]
	CAN1->MCR |= CAN_MCR_INRQ;
 8000284:	4b35      	ldr	r3, [pc, #212]	; (800035c <main+0x1ec>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a34      	ldr	r2, [pc, #208]	; (800035c <main+0x1ec>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]
	while(!((CAN1->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)){;} // Wait for INAK to become ready
 8000290:	4b32      	ldr	r3, [pc, #200]	; (800035c <main+0x1ec>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	2b01      	cmp	r3, #1
 800029a:	bf14      	ite	ne
 800029c:	2301      	movne	r3, #1
 800029e:	2300      	moveq	r3, #0
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d000      	beq.n	80002a8 <main+0x138>
 80002a6:	e7f3      	b.n	8000290 <main+0x120>
	CAN1->MCR &= ~(CAN_MCR_DBF); // Let CAN work in debug mode
 80002a8:	4b2c      	ldr	r3, [pc, #176]	; (800035c <main+0x1ec>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2b      	ldr	r2, [pc, #172]	; (800035c <main+0x1ec>)
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~(CAN_MCR_SLEEP); // Wake CAN
 80002b4:	4b29      	ldr	r3, [pc, #164]	; (800035c <main+0x1ec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a28      	ldr	r2, [pc, #160]	; (800035c <main+0x1ec>)
 80002ba:	f023 0302 	bic.w	r3, r3, #2
 80002be:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_TXFP; // Transmit FIFO priority
 80002c0:	4b26      	ldr	r3, [pc, #152]	; (800035c <main+0x1ec>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a25      	ldr	r2, [pc, #148]	; (800035c <main+0x1ec>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	CAN1->sTxMailBox[0].TDTR |= 0x4;
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <main+0x1ec>)
 80002ce:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80002d2:	4a22      	ldr	r2, [pc, #136]	; (800035c <main+0x1ec>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TIR = TIxR;
 80002dc:	4a1f      	ldr	r2, [pc, #124]	; (800035c <main+0x1ec>)
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	uint32_t CAN_Data = 0xDEADBEEF;
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <main+0x1f0>)
 80002e6:	607b      	str	r3, [r7, #4]
	CAN1->sTxMailBox[0].TDLR = CAN_Data;
 80002e8:	4a1c      	ldr	r2, [pc, #112]	; (800035c <main+0x1ec>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->MCR &= ~(CAN_MCR_INRQ);
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x1ec>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <main+0x1ec>)
 80002f6:	f023 0301 	bic.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
	CAN1->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <main+0x1ec>)
 80002fe:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000302:	4a16      	ldr	r2, [pc, #88]	; (800035c <main+0x1ec>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

	//GPIO for debugging
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //Turn on Port B
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <main+0x1e0>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <main+0x1e0>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
	GPIOB->CRH |= GPIO_CRH_MODE12; 	//Set PB7 as output
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <main+0x1f4>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <main+0x1f4>)
 800031e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000322:	6053      	str	r3, [r2, #4]
	

	while(1)
	{
		GPIOB->BSRR |= GPIO_BSRR_BR12; //Turn off PB7
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <main+0x1f4>)
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <main+0x1f4>)
 800032a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032e:	6113      	str	r3, [r2, #16]
		waitLoop(0xFE);
 8000330:	20fe      	movs	r0, #254	; 0xfe
 8000332:	f000 f819 	bl	8000368 <_Z8waitLoopi>
		GPIOB->BSRR |= GPIO_BSRR_BS12; //Turn on PB7
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <main+0x1f4>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <main+0x1f4>)
 800033c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000340:	6113      	str	r3, [r2, #16]
		waitLoop(0xFE);
 8000342:	20fe      	movs	r0, #254	; 0xfe
 8000344:	f000 f810 	bl	8000368 <_Z8waitLoopi>
		GPIOB->BSRR |= GPIO_BSRR_BR12; //Turn off PB7
 8000348:	e7ec      	b.n	8000324 <main+0x1b4>
 800034a:	bf00      	nop
 800034c:	40022000 	.word	0x40022000
 8000350:	40021000 	.word	0x40021000
 8000354:	40010000 	.word	0x40010000
 8000358:	40010800 	.word	0x40010800
 800035c:	40006400 	.word	0x40006400
 8000360:	deadbeef 	.word	0xdeadbeef
 8000364:	40010c00 	.word	0x40010c00

08000368 <_Z8waitLoopi>:

	return 0;
}

void waitLoop(int loops)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < loops; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	429a      	cmp	r2, r3
 800037a:	da0e      	bge.n	800039a <_Z8waitLoopi+0x32>
	{
		for(uint32_t j = 0; j < 0xFFF; j++)
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000386:	4293      	cmp	r3, r2
 8000388:	d803      	bhi.n	8000392 <_Z8waitLoopi+0x2a>
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	3301      	adds	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	e7f6      	b.n	8000380 <_Z8waitLoopi+0x18>
	for(int i = 0; i < loops; i++)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	e7ec      	b.n	8000374 <_Z8waitLoopi+0xc>
		{
			;
		}
	}
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x5c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <SystemInit+0x5c>)
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	4911      	ldr	r1, [pc, #68]	; (8000400 <SystemInit+0x5c>)
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <SystemInit+0x60>)
 80003bc:	4013      	ands	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x5c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <SystemInit+0x5c>)
 80003c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SystemInit+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <SystemInit+0x5c>)
 80003d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <SystemInit+0x5c>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <SystemInit+0x5c>)
 80003e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <SystemInit+0x5c>)
 80003ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SystemInit+0x64>)
 80003f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000
 8000404:	f8ff0000 	.word	0xf8ff0000
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490e      	ldr	r1, [pc, #56]	; (800044c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0b      	ldr	r4, [pc, #44]	; (8000458 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000436:	f7ff ffb5 	bl	80003a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800043a:	f000 f811 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043e:	f7ff fe97 	bl	8000170 <main>

08000442 <LoopForever>:

LoopForever:
    b LoopForever
 8000442:	e7fe      	b.n	8000442 <LoopForever>
  ldr   r0, =_estack
 8000444:	20004fff 	.word	0x20004fff
  ldr r0, =_sdata
 8000448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800044c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000450:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 8000454:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000458:	2000001c 	.word	0x2000001c

0800045c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800045c:	e7fe      	b.n	800045c <ADC1_2_IRQHandler>
	...

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	2500      	movs	r5, #0
 8000464:	4e0c      	ldr	r6, [pc, #48]	; (8000498 <__libc_init_array+0x38>)
 8000466:	4c0d      	ldr	r4, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000468:	1ba4      	subs	r4, r4, r6
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	42a5      	cmp	r5, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	f000 f81a 	bl	80004a8 <_init>
 8000474:	2500      	movs	r5, #0
 8000476:	4e0a      	ldr	r6, [pc, #40]	; (80004a0 <__libc_init_array+0x40>)
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <__libc_init_array+0x44>)
 800047a:	1ba4      	subs	r4, r4, r6
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	42a5      	cmp	r5, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000488:	4798      	blx	r3
 800048a:	3501      	adds	r5, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000492:	4798      	blx	r3
 8000494:	3501      	adds	r5, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c0 	.word	0x080004c0
 80004a4:	080004c4 	.word	0x080004c4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
