#include "../Inc/stm32f103x6.h"

void waitLoop(int loops);

int main(void)
{
	// Clock setup. External 8MHz.
	FLASH->ACR |= FLASH_ACR_LATENCY_1; //Set Flash Latency to 1 for 48MHz (2 for 72MHz)
	FLASH->ACR |= FLASH_ACR_PRFTBE; //Enable prefetch buffer
	RCC->APB2ENR |= RCC_APB2ENR_IOPDEN; // HSE is on PD0 and PD1
	AFIO->MAPR &= ~(AFIO_MAPR_PD01_REMAP); // Set PD0 as OSC_In and PD1 as OSC_out
	RCC->CFGR |= RCC_CFGR_PLLMULL6; // Set PLL to x6 for 48MHz (set to 9 for 72MHz)
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // Set APB1 divider to /2
	RCC->CFGR |= RCC_CFGR_PLLSRC; // Set PREDIV1 as source for PLL
	RCC->CR |= RCC_CR_HSEON; // Turn in external clock input
	while(!((RCC->CR & RCC_CR_HSERDY)== RCC_CR_HSERDY)){;} // Wait for HSE to become ready
	RCC->CR |= RCC_CR_PLLON; // Turn on PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL for SYSCLOCK
	RCC->CFGR |= RCC_CFGR_MCO_SYSCLK; // Select sysclock for clock input
	RCC->CR &= ~(RCC_CR_HSION); // Turn off internal clock

	//CAN setup. Using PA11 and PA12
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN; // Enable CAN clock
	GPIOA->CRH &= ~(GPIO_CRH_MODE11_0); // Set PA11 as alt mode.
	GPIOA->CRH |= GPIO_CRH_MODE11_1;
	GPIOA->CRH &= ~(GPIO_CRH_MODE12_0); // Set PA12 as alt mode.
	GPIOA->CRH |= GPIO_CRH_MODE12_1;
	CAN1->BTR |= CAN_BTR_LBKM; // Debug mode

	//GPIO for debugging
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //Turn on Port B
	GPIOB->CRL |= GPIO_CRL_MODE7_1; 	//Set PB7 as output

	//Create CAN message for testing:
	uint16_t CAN_ID = 0xF; // Must be lower than
	uint32_t TIxR = 0x1;
	TIxR |= (CAN_ID << 2); // move 11bit ID to bit 21-31

	while(1)
	{
		GPIOB->BSRR |= GPIO_BSRR_BR7; //Turn off PB7
		waitLoop(0xFE);
		GPIOB->BSRR |= GPIO_BSRR_BS7; //Turn on PB7
		waitLoop(0xFE);
	}

	return 0;
}

void waitLoop(int loops)
{
	for(int i = 0; i < loops; i++)
	{
		for(uint32_t j = 0; j < 0xFFF; j++)
		{
			;
		}
	}
}
