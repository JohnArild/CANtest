
STM32CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000074e  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002c0  00000000  00000000  00010b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00010dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  00010e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010667  00000000  00000000  00010ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000907  00000000  00000000  00021527  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054307  00000000  00000000  00021e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00076135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  000761b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000370 	.word	0x08000370

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000370 	.word	0x08000370

08000108 <_ZN12BSP_STM32CAN9initilizeEv>:
  ******************************************************************************
*/

#include "BSP.h"

int BSP_STM32CAN::initilize (){
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
    BSP_STM32CAN::MCUspeed_48MHz();
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	0018      	movs	r0, r3
 8000114:	f000 f812 	bl	800013c <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv>
	BSP_STM32CAN::setup_GPIO ();
 8000118:	687b      	ldr	r3, [r7, #4]
 800011a:	0018      	movs	r0, r3
 800011c:	f000 f870 	bl	8000200 <_ZN12BSP_STM32CAN10setup_GPIOEv>
	BSP_STM32CAN::setup_CAN ();
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	0018      	movs	r0, r3
 8000124:	f000 f886 	bl	8000234 <_ZN12BSP_STM32CAN9setup_CANEv>
	BSP_STM32CAN::setup_SPI ();
 8000128:	687b      	ldr	r3, [r7, #4]
 800012a:	0018      	movs	r0, r3
 800012c:	f000 f88b 	bl	8000246 <_ZN12BSP_STM32CAN9setup_SPIEv>
    return 0;
 8000130:	2300      	movs	r3, #0
}
 8000132:	0018      	movs	r0, r3
 8000134:	46bd      	mov	sp, r7
 8000136:	b002      	add	sp, #8
 8000138:	bd80      	pop	{r7, pc}
	...

0800013c <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv>:

int BSP_STM32CAN::MCUspeed_48MHz (){
 800013c:	b580      	push	{r7, lr}
 800013e:	b082      	sub	sp, #8
 8000140:	af00      	add	r7, sp, #0
 8000142:	6078      	str	r0, [r7, #4]
	FLASH->ACR |= FLASH_ACR_LATENCY; // One wait-state for 48MHz operation
 8000144:	4b2b      	ldr	r3, [pc, #172]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000146:	681a      	ldr	r2, [r3, #0]
 8000148:	4b2a      	ldr	r3, [pc, #168]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 800014a:	2101      	movs	r1, #1
 800014c:	430a      	orrs	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE; // Prefetch buffer enable
 8000150:	4b28      	ldr	r3, [pc, #160]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b27      	ldr	r3, [pc, #156]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000156:	2110      	movs	r1, #16
 8000158:	430a      	orrs	r2, r1
 800015a:	601a      	str	r2, [r3, #0]
	RCC->AHBENR |= RCC_AHBENR_GPIOFEN; // External crystal is on Port F
 800015c:	4b26      	ldr	r3, [pc, #152]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800015e:	695a      	ldr	r2, [r3, #20]
 8000160:	4b25      	ldr	r3, [pc, #148]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000162:	2180      	movs	r1, #128	; 0x80
 8000164:	03c9      	lsls	r1, r1, #15
 8000166:	430a      	orrs	r2, r1
 8000168:	615a      	str	r2, [r3, #20]
	RCC->CFGR |= RCC_CFGR_PLLMUL6; // Set PLL to x6 for 48MHz
 800016a:	4b23      	ldr	r3, [pc, #140]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800016c:	685a      	ldr	r2, [r3, #4]
 800016e:	4b22      	ldr	r3, [pc, #136]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	0349      	lsls	r1, r1, #13
 8000174:	430a      	orrs	r2, r1
 8000176:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV; // HSE/PREDIV selected as PLL input clock
 8000178:	4b1f      	ldr	r3, [pc, #124]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800017a:	685a      	ldr	r2, [r3, #4]
 800017c:	4b1e      	ldr	r3, [pc, #120]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800017e:	2180      	movs	r1, #128	; 0x80
 8000180:	0249      	lsls	r1, r1, #9
 8000182:	430a      	orrs	r2, r1
 8000184:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSEON; // Turn in external clock input
 8000186:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	4b1b      	ldr	r3, [pc, #108]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800018c:	2180      	movs	r1, #128	; 0x80
 800018e:	0249      	lsls	r1, r1, #9
 8000190:	430a      	orrs	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
	while(!((RCC->CR & RCC_CR_HSERDY)== RCC_CR_HSERDY)){;} // wait for HSE to be ready
 8000194:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	2380      	movs	r3, #128	; 0x80
 800019a:	029b      	lsls	r3, r3, #10
 800019c:	4013      	ands	r3, r2
 800019e:	4a17      	ldr	r2, [pc, #92]	; (80001fc <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xc0>)
 80001a0:	4694      	mov	ip, r2
 80001a2:	4463      	add	r3, ip
 80001a4:	1e5a      	subs	r2, r3, #1
 80001a6:	4193      	sbcs	r3, r2
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d000      	beq.n	80001b0 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x74>
 80001ae:	e7f1      	b.n	8000194 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x58>
	RCC->CR |= RCC_CR_PLLON;
 80001b0:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	0449      	lsls	r1, r1, #17
 80001ba:	430a      	orrs	r2, r1
 80001bc:	601a      	str	r2, [r3, #0]
	while(!((RCC->CR & RCC_CR_PLLRDY)== RCC_CR_PLLRDY)){;} // wait for PLL to be ready
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	2380      	movs	r3, #128	; 0x80
 80001c4:	049b      	lsls	r3, r3, #18
 80001c6:	4013      	ands	r3, r2
 80001c8:	22fe      	movs	r2, #254	; 0xfe
 80001ca:	0612      	lsls	r2, r2, #24
 80001cc:	4694      	mov	ip, r2
 80001ce:	4463      	add	r3, ip
 80001d0:	1e5a      	subs	r2, r3, #1
 80001d2:	4193      	sbcs	r3, r2
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d000      	beq.n	80001dc <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xa0>
 80001da:	e7f0      	b.n	80001be <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x82>
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL for SYSCLOCK
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001e2:	2102      	movs	r1, #2
 80001e4:	430a      	orrs	r2, r1
 80001e6:	605a      	str	r2, [r3, #4]
    return 0;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	0018      	movs	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	b002      	add	sp, #8
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	40022000 	.word	0x40022000
 80001f8:	40021000 	.word	0x40021000
 80001fc:	fffe0000 	.word	0xfffe0000

08000200 <_ZN12BSP_STM32CAN10setup_GPIOEv>:

int BSP_STM32CAN::setup_GPIO (){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <_ZN12BSP_STM32CAN10setup_GPIOEv+0x30>)
 800020a:	695a      	ldr	r2, [r3, #20]
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <_ZN12BSP_STM32CAN10setup_GPIOEv+0x30>)
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	0289      	lsls	r1, r1, #10
 8000212:	430a      	orrs	r2, r1
 8000214:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8000216:	2390      	movs	r3, #144	; 0x90
 8000218:	05db      	lsls	r3, r3, #23
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	2390      	movs	r3, #144	; 0x90
 800021e:	05db      	lsls	r3, r3, #23
 8000220:	2140      	movs	r1, #64	; 0x40
 8000222:	430a      	orrs	r2, r1
 8000224:	601a      	str	r2, [r3, #0]
    return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	b002      	add	sp, #8
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000

08000234 <_ZN12BSP_STM32CAN9setup_CANEv>:

int BSP_STM32CAN::setup_CAN (){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b002      	add	sp, #8
 8000244:	bd80      	pop	{r7, pc}

08000246 <_ZN12BSP_STM32CAN9setup_SPIEv>:

int BSP_STM32CAN::setup_SPI (){
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
    return 0;
 800024e:	2300      	movs	r3, #0
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <_Z8waitLoopi>:
*/

#include "BSP.h"

void waitLoop(int loops)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < loops; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	429a      	cmp	r2, r3
 800026a:	da0d      	bge.n	8000288 <_Z8waitLoopi+0x30>
	{
		for(uint32_t j = 0; j < 0xFFF; j++)
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <_Z8waitLoopi+0x38>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d803      	bhi.n	8000280 <_Z8waitLoopi+0x28>
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	3301      	adds	r3, #1
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	e7f7      	b.n	8000270 <_Z8waitLoopi+0x18>
	for(int i = 0; i < loops; i++)
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	e7ed      	b.n	8000264 <_Z8waitLoopi+0xc>
		{
			;
		}
	}
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b004      	add	sp, #16
 800028e:	bd80      	pop	{r7, pc}
 8000290:	00000ffe 	.word	0x00000ffe

08000294 <main>:

int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	BSP_STM32CAN bsp;

	bsp.initilize();
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	f7ff ff33 	bl	8000108 <_ZN12BSP_STM32CAN9initilizeEv>

	while(1)
	{
		GPIOA->BSRR |= GPIO_BSRR_BR_3;
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	699a      	ldr	r2, [r3, #24]
 80002a8:	2390      	movs	r3, #144	; 0x90
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0309      	lsls	r1, r1, #12
 80002b0:	430a      	orrs	r2, r1
 80002b2:	619a      	str	r2, [r3, #24]
		waitLoop(0xFE);
 80002b4:	20fe      	movs	r0, #254	; 0xfe
 80002b6:	f7ff ffcf 	bl	8000258 <_Z8waitLoopi>
		GPIOA->BSRR |= GPIO_BSRR_BS_3;
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	699a      	ldr	r2, [r3, #24]
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2108      	movs	r1, #8
 80002c6:	430a      	orrs	r2, r1
 80002c8:	619a      	str	r2, [r3, #24]
		waitLoop(0xFE);
 80002ca:	20fe      	movs	r0, #254	; 0xfe
 80002cc:	f7ff ffc4 	bl	8000258 <_Z8waitLoopi>
		GPIOA->BSRR |= GPIO_BSRR_BR_3;
 80002d0:	e7e7      	b.n	80002a2 <main+0xe>
	...

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490e      	ldr	r1, [pc, #56]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fe:	e000      	b.n	8000302 <LoopFillZerobss+0x8>
 8000300:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ffc5 	bl	8000294 <main>

0800030a <LoopForever>:

LoopForever:
    b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_COMP_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	; (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	2600      	movs	r6, #0
 800033a:	f000 f819 	bl	8000370 <_init>
 800033e:	4d0a      	ldr	r5, [pc, #40]	; (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	00b3      	lsls	r3, r6, #2
 800034e:	58eb      	ldr	r3, [r5, r3]
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	00b3      	lsls	r3, r6, #2
 8000358:	58eb      	ldr	r3, [r5, r3]
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
