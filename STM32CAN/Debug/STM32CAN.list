
STM32CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b0  080005b8  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b0  080005b0  000105b8  2**0
                  CONTENTS
  4 .ARM          00000000  080005b0  080005b0  000105b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b0  080005b8  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b4  080005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005b8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000105b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a3f  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000329  00000000  00000000  0001101f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00011348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  000113d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010667  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000092c  00000000  00000000  00021aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005443e  00000000  00000000  000223d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00076811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  0007688c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000598 	.word	0x08000598

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000598 	.word	0x08000598

08000108 <_ZN12BSP_STM32CAN9initilizeEv>:
  ******************************************************************************
*/

#include "BSP.h"

int BSP_STM32CAN::initilize (){
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
    BSP_STM32CAN::MCUspeed_48MHz();
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	0018      	movs	r0, r3
 8000114:	f000 f812 	bl	800013c <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv>
	BSP_STM32CAN::setup_GPIO ();
 8000118:	687b      	ldr	r3, [r7, #4]
 800011a:	0018      	movs	r0, r3
 800011c:	f000 f870 	bl	8000200 <_ZN12BSP_STM32CAN10setup_GPIOEv>
	BSP_STM32CAN::setup_CAN ();
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	0018      	movs	r0, r3
 8000124:	f000 f8ae 	bl	8000284 <_ZN12BSP_STM32CAN9setup_CANEv>
	BSP_STM32CAN::setup_SPI ();
 8000128:	687b      	ldr	r3, [r7, #4]
 800012a:	0018      	movs	r0, r3
 800012c:	f000 f96a 	bl	8000404 <_ZN12BSP_STM32CAN9setup_SPIEv>
    return 0;
 8000130:	2300      	movs	r3, #0
}
 8000132:	0018      	movs	r0, r3
 8000134:	46bd      	mov	sp, r7
 8000136:	b002      	add	sp, #8
 8000138:	bd80      	pop	{r7, pc}
	...

0800013c <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv>:

int BSP_STM32CAN::MCUspeed_48MHz (){
 800013c:	b580      	push	{r7, lr}
 800013e:	b082      	sub	sp, #8
 8000140:	af00      	add	r7, sp, #0
 8000142:	6078      	str	r0, [r7, #4]
	FLASH->ACR |= FLASH_ACR_LATENCY; // One wait-state for 48MHz operation
 8000144:	4b2b      	ldr	r3, [pc, #172]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000146:	681a      	ldr	r2, [r3, #0]
 8000148:	4b2a      	ldr	r3, [pc, #168]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 800014a:	2101      	movs	r1, #1
 800014c:	430a      	orrs	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE; // Prefetch buffer enable
 8000150:	4b28      	ldr	r3, [pc, #160]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b27      	ldr	r3, [pc, #156]	; (80001f4 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xb8>)
 8000156:	2110      	movs	r1, #16
 8000158:	430a      	orrs	r2, r1
 800015a:	601a      	str	r2, [r3, #0]
	RCC->AHBENR |= RCC_AHBENR_GPIOFEN; // External crystal is on Port F
 800015c:	4b26      	ldr	r3, [pc, #152]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800015e:	695a      	ldr	r2, [r3, #20]
 8000160:	4b25      	ldr	r3, [pc, #148]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000162:	2180      	movs	r1, #128	; 0x80
 8000164:	03c9      	lsls	r1, r1, #15
 8000166:	430a      	orrs	r2, r1
 8000168:	615a      	str	r2, [r3, #20]
	RCC->CFGR |= RCC_CFGR_PLLMUL6; // Set PLL to x6 for 48MHz
 800016a:	4b23      	ldr	r3, [pc, #140]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800016c:	685a      	ldr	r2, [r3, #4]
 800016e:	4b22      	ldr	r3, [pc, #136]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	0349      	lsls	r1, r1, #13
 8000174:	430a      	orrs	r2, r1
 8000176:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV; // HSE/PREDIV selected as PLL input clock
 8000178:	4b1f      	ldr	r3, [pc, #124]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800017a:	685a      	ldr	r2, [r3, #4]
 800017c:	4b1e      	ldr	r3, [pc, #120]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800017e:	2180      	movs	r1, #128	; 0x80
 8000180:	0249      	lsls	r1, r1, #9
 8000182:	430a      	orrs	r2, r1
 8000184:	605a      	str	r2, [r3, #4]
	RCC->CR |= RCC_CR_HSEON; // Turn in external clock input
 8000186:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	4b1b      	ldr	r3, [pc, #108]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 800018c:	2180      	movs	r1, #128	; 0x80
 800018e:	0249      	lsls	r1, r1, #9
 8000190:	430a      	orrs	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
	while(!((RCC->CR & RCC_CR_HSERDY)== RCC_CR_HSERDY)){;} // wait for HSE to be ready
 8000194:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	2380      	movs	r3, #128	; 0x80
 800019a:	029b      	lsls	r3, r3, #10
 800019c:	4013      	ands	r3, r2
 800019e:	4a17      	ldr	r2, [pc, #92]	; (80001fc <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xc0>)
 80001a0:	4694      	mov	ip, r2
 80001a2:	4463      	add	r3, ip
 80001a4:	1e5a      	subs	r2, r3, #1
 80001a6:	4193      	sbcs	r3, r2
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d000      	beq.n	80001b0 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x74>
 80001ae:	e7f1      	b.n	8000194 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x58>
	RCC->CR |= RCC_CR_PLLON;
 80001b0:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	0449      	lsls	r1, r1, #17
 80001ba:	430a      	orrs	r2, r1
 80001bc:	601a      	str	r2, [r3, #0]
	while(!((RCC->CR & RCC_CR_PLLRDY)== RCC_CR_PLLRDY)){;} // wait for PLL to be ready
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	2380      	movs	r3, #128	; 0x80
 80001c4:	049b      	lsls	r3, r3, #18
 80001c6:	4013      	ands	r3, r2
 80001c8:	22fe      	movs	r2, #254	; 0xfe
 80001ca:	0612      	lsls	r2, r2, #24
 80001cc:	4694      	mov	ip, r2
 80001ce:	4463      	add	r3, ip
 80001d0:	1e5a      	subs	r2, r3, #1
 80001d2:	4193      	sbcs	r3, r2
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d000      	beq.n	80001dc <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xa0>
 80001da:	e7f0      	b.n	80001be <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0x82>
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL for SYSCLOCK
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <_ZN12BSP_STM32CAN14MCUspeed_48MHzEv+0xbc>)
 80001e2:	2102      	movs	r1, #2
 80001e4:	430a      	orrs	r2, r1
 80001e6:	605a      	str	r2, [r3, #4]
    return 0;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	0018      	movs	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	b002      	add	sp, #8
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	40022000 	.word	0x40022000
 80001f8:	40021000 	.word	0x40021000
 80001fc:	fffe0000 	.word	0xfffe0000

08000200 <_ZN12BSP_STM32CAN10setup_GPIOEv>:

int BSP_STM32CAN::setup_GPIO (){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	//Enable ports
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <_ZN12BSP_STM32CAN10setup_GPIOEv+0x7c>)
 800020a:	695a      	ldr	r2, [r3, #20]
 800020c:	4b1b      	ldr	r3, [pc, #108]	; (800027c <_ZN12BSP_STM32CAN10setup_GPIOEv+0x7c>)
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	0289      	lsls	r1, r1, #10
 8000212:	430a      	orrs	r2, r1
 8000214:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <_ZN12BSP_STM32CAN10setup_GPIOEv+0x7c>)
 8000218:	695a      	ldr	r2, [r3, #20]
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <_ZN12BSP_STM32CAN10setup_GPIOEv+0x7c>)
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	02c9      	lsls	r1, r1, #11
 8000220:	430a      	orrs	r2, r1
 8000222:	615a      	str	r2, [r3, #20]

	//Set up IO pins
	GPIOB->MODER |= GPIO_MODER_MODER1_0; // MCU_IO0 (output)
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <_ZN12BSP_STM32CAN10setup_GPIOEv+0x80>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <_ZN12BSP_STM32CAN10setup_GPIOEv+0x80>)
 800022a:	2104      	movs	r1, #4
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER0_0; // MCU_IO1 (output)
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	2390      	movs	r3, #144	; 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2101      	movs	r1, #1
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1_0; // MCU_IO2 (output)
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2104      	movs	r1, #4
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0; // MCU_IO3 (output)
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	2390      	movs	r3, #144	; 0x90
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2110      	movs	r1, #16
 800025c:	430a      	orrs	r2, r1
 800025e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_0; // MCU_IO4 (output)
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	2390      	movs	r3, #144	; 0x90
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2140      	movs	r1, #64	; 0x40
 800026c:	430a      	orrs	r2, r1
 800026e:	601a      	str	r2, [r3, #0]
    return 0;
 8000270:	2300      	movs	r3, #0
}
 8000272:	0018      	movs	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	b002      	add	sp, #8
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400

08000284 <_ZN12BSP_STM32CAN9setup_CANEv>:

int BSP_STM32CAN::setup_CAN (){
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800028c:	4b58      	ldr	r3, [pc, #352]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	4b57      	ldr	r3, [pc, #348]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	0289      	lsls	r1, r1, #10
 8000296:	430a      	orrs	r2, r1
 8000298:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 800029a:	4b55      	ldr	r3, [pc, #340]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 800029c:	699a      	ldr	r2, [r3, #24]
 800029e:	4b54      	ldr	r3, [pc, #336]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 80002a0:	2101      	movs	r1, #1
 80002a2:	430a      	orrs	r2, r1
 80002a4:	619a      	str	r2, [r3, #24]
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP; // Remap (pin pair PA11/12 mapped instead of PA9/10)
 80002a6:	4b53      	ldr	r3, [pc, #332]	; (80003f4 <_ZN12BSP_STM32CAN9setup_CANEv+0x170>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b52      	ldr	r3, [pc, #328]	; (80003f4 <_ZN12BSP_STM32CAN9setup_CANEv+0x170>)
 80002ac:	2110      	movs	r1, #16
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER11_1; // CAN_RXD (alternative)
 80002b2:	2390      	movs	r3, #144	; 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	0409      	lsls	r1, r1, #16
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER12_1; // CAN_TXD (alternative)
 80002c4:	2390      	movs	r3, #144	; 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	0489      	lsls	r1, r1, #18
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= 0x44000U; // Set Port 11 and 12 as AF4 for CAN
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2188      	movs	r1, #136	; 0x88
 80002e2:	02c9      	lsls	r1, r1, #11
 80002e4:	430a      	orrs	r2, r1
 80002e6:	625a      	str	r2, [r3, #36]	; 0x24
	//GPIOA->OTYPER |= GPIO_OTYPER_OT_11;
	//GPIOA->OTYPER |= GPIO_OTYPER_OT_12;
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR11_0 |GPIO_OSPEEDR_OSPEEDR11_1;
 80002e8:	2390      	movs	r3, #144	; 0x90
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	2390      	movs	r3, #144	; 0x90
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	21c0      	movs	r1, #192	; 0xc0
 80002f4:	0409      	lsls	r1, r1, #16
 80002f6:	430a      	orrs	r2, r1
 80002f8:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR12_0 |GPIO_OSPEEDR_OSPEEDR12_1;
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	689a      	ldr	r2, [r3, #8]
 8000300:	2390      	movs	r3, #144	; 0x90
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	21c0      	movs	r1, #192	; 0xc0
 8000306:	0489      	lsls	r1, r1, #18
 8000308:	430a      	orrs	r2, r1
 800030a:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR11_0;
 800030c:	2390      	movs	r3, #144	; 0x90
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	2390      	movs	r3, #144	; 0x90
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	2180      	movs	r1, #128	; 0x80
 8000318:	03c9      	lsls	r1, r1, #15
 800031a:	430a      	orrs	r2, r1
 800031c:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR12_0;
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	2390      	movs	r3, #144	; 0x90
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	0449      	lsls	r1, r1, #17
 800032c:	430a      	orrs	r2, r1
 800032e:	60da      	str	r2, [r3, #12]
	RCC->APB1ENR |= RCC_APB1ENR_CANEN;
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 8000332:	69da      	ldr	r2, [r3, #28]
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <_ZN12BSP_STM32CAN9setup_CANEv+0x16c>)
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	0489      	lsls	r1, r1, #18
 800033a:	430a      	orrs	r2, r1
 800033c:	61da      	str	r2, [r3, #28]
	CAN->MCR |= CAN_MCR_INRQ; // Initialization Request
 800033e:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000344:	2101      	movs	r1, #1
 8000346:	430a      	orrs	r2, r1
 8000348:	601a      	str	r2, [r3, #0]
	//CAN->BTR |= CAN_BTR_LBKM; // Debug mode
	//CAN->MCR |= CAN_MCR_NART; // No retransmitt

	//Create CAN message for testing:
	uint16_t CAN_ID = 0x123;
 800034a:	2116      	movs	r1, #22
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2224      	movs	r2, #36	; 0x24
 8000350:	32ff      	adds	r2, #255	; 0xff
 8000352:	801a      	strh	r2, [r3, #0]
	uint32_t TIxR = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
	TIxR = (CAN_ID << 21); // move 11bit ID to bit 21-31
 8000358:	187b      	adds	r3, r7, r1
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	055b      	lsls	r3, r3, #21
 800035e:	613b      	str	r3, [r7, #16]
	while(!((CAN->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)){;} // Wait for INAK to become ready
 8000360:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2201      	movs	r2, #1
 8000366:	4013      	ands	r3, r2
 8000368:	3b01      	subs	r3, #1
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b00      	cmp	r3, #0
 8000372:	d000      	beq.n	8000376 <_ZN12BSP_STM32CAN9setup_CANEv+0xf2>
 8000374:	e7f4      	b.n	8000360 <_ZN12BSP_STM32CAN9setup_CANEv+0xdc>
	CAN->MCR &= ~(0x00010000); // Let CAN work in debug mode
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 800037c:	491f      	ldr	r1, [pc, #124]	; (80003fc <_ZN12BSP_STM32CAN9setup_CANEv+0x178>)
 800037e:	400a      	ands	r2, r1
 8000380:	601a      	str	r2, [r3, #0]
	CAN->MCR &= ~(CAN_MCR_SLEEP); // Wake CAN
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000388:	2102      	movs	r1, #2
 800038a:	438a      	bics	r2, r1
 800038c:	601a      	str	r2, [r3, #0]
	CAN->MCR |= CAN_MCR_TXFP; // Transmit FIFO priority
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 8000394:	2104      	movs	r1, #4
 8000396:	430a      	orrs	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
	CAN->sTxMailBox[0].TDTR |= 0x4;
 800039a:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 800039c:	23c2      	movs	r3, #194	; 0xc2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	58d3      	ldr	r3, [r2, r3]
 80003a2:	4915      	ldr	r1, [pc, #84]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	431a      	orrs	r2, r3
 80003a8:	23c2      	movs	r3, #194	; 0xc2
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	50ca      	str	r2, [r1, r3]
	CAN->sTxMailBox[0].TIR = TIxR;
 80003ae:	4912      	ldr	r1, [pc, #72]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003b0:	23c0      	movs	r3, #192	; 0xc0
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	693a      	ldr	r2, [r7, #16]
 80003b6:	50ca      	str	r2, [r1, r3]
	uint32_t CAN_Data = 0xDEADBEEF;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <_ZN12BSP_STM32CAN9setup_CANEv+0x17c>)
 80003ba:	60fb      	str	r3, [r7, #12]
	CAN->sTxMailBox[0].TDLR = CAN_Data;
 80003bc:	490e      	ldr	r1, [pc, #56]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003be:	23c4      	movs	r3, #196	; 0xc4
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	50ca      	str	r2, [r1, r3]
	CAN->MCR &= ~(CAN_MCR_INRQ);
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	438a      	bics	r2, r1
 80003d0:	601a      	str	r2, [r3, #0]
	CAN->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003d4:	23c0      	movs	r3, #192	; 0xc0
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	58d3      	ldr	r3, [r2, r3]
 80003da:	4907      	ldr	r1, [pc, #28]	; (80003f8 <_ZN12BSP_STM32CAN9setup_CANEv+0x174>)
 80003dc:	2201      	movs	r2, #1
 80003de:	431a      	orrs	r2, r3
 80003e0:	23c0      	movs	r3, #192	; 0xc0
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	50ca      	str	r2, [r1, r3]
    return 0;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b006      	add	sp, #24
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000
 80003f8:	40006400 	.word	0x40006400
 80003fc:	fffeffff 	.word	0xfffeffff
 8000400:	deadbeef 	.word	0xdeadbeef

08000404 <_ZN12BSP_STM32CAN9setup_SPIEv>:

int BSP_STM32CAN::setup_SPI (){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <_ZN12BSP_STM32CAN9setup_SPIEv+0x78>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <_ZN12BSP_STM32CAN9setup_SPIEv+0x78>)
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	0289      	lsls	r1, r1, #10
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER4_1; // SPI_NSS (alternative)
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0089      	lsls	r1, r1, #2
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1; // SPI_SCK (alternative)
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	2390      	movs	r3, #144	; 0x90
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	0109      	lsls	r1, r1, #4
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER6_1; // SPI_MISO (alternative)
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0189      	lsls	r1, r1, #6
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_1; // SPI_MOSI (alternative)
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	2390      	movs	r3, #144	; 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	0209      	lsls	r1, r1, #8
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <_ZN12BSP_STM32CAN9setup_SPIEv+0x78>)
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <_ZN12BSP_STM32CAN9setup_SPIEv+0x78>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0149      	lsls	r1, r1, #5
 800046c:	430a      	orrs	r2, r1
 800046e:	619a      	str	r2, [r3, #24]
    return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	0018      	movs	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40021000 	.word	0x40021000

08000480 <_Z8waitLoopi>:
*/

#include "BSP.h"

void waitLoop(int loops)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < loops; i++)
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	da0d      	bge.n	80004b0 <_Z8waitLoopi+0x30>
	{
		for(uint32_t j = 0; j < 0xFFF; j++)
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <_Z8waitLoopi+0x38>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d803      	bhi.n	80004a8 <_Z8waitLoopi+0x28>
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	e7f7      	b.n	8000498 <_Z8waitLoopi+0x18>
	for(int i = 0; i < loops; i++)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	e7ed      	b.n	800048c <_Z8waitLoopi+0xc>
		{
			;
		}
	}
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	00000ffe 	.word	0x00000ffe

080004bc <main>:

int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	BSP_STM32CAN bsp;

	bsp.initilize();
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	0018      	movs	r0, r3
 80004c6:	f7ff fe1f 	bl	8000108 <_ZN12BSP_STM32CAN9initilizeEv>

	while(1)
	{
		GPIOA->BSRR |= GPIO_BSRR_BR_3;
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2390      	movs	r3, #144	; 0x90
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0309      	lsls	r1, r1, #12
 80004d8:	430a      	orrs	r2, r1
 80004da:	619a      	str	r2, [r3, #24]
		waitLoop(0xFE);
 80004dc:	20fe      	movs	r0, #254	; 0xfe
 80004de:	f7ff ffcf 	bl	8000480 <_Z8waitLoopi>
		GPIOA->BSRR |= GPIO_BSRR_BS_3;
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	2390      	movs	r3, #144	; 0x90
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2108      	movs	r1, #8
 80004ee:	430a      	orrs	r2, r1
 80004f0:	619a      	str	r2, [r3, #24]
		waitLoop(0xFE);
 80004f2:	20fe      	movs	r0, #254	; 0xfe
 80004f4:	f7ff ffc4 	bl	8000480 <_Z8waitLoopi>
		GPIOA->BSRR |= GPIO_BSRR_BR_3;
 80004f8:	e7e7      	b.n	80004ca <main+0xe>
	...

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0b      	ldr	r4, [pc, #44]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000526:	e000      	b.n	800052a <LoopFillZerobss+0x8>
 8000528:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f811 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ffc5 	bl	80004bc <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000540:	080005b8 	.word	0x080005b8
  ldr r2, =_sbss
 8000544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000548:	2000001c 	.word	0x2000001c

0800054c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_COMP_IRQHandler>
	...

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2600      	movs	r6, #0
 8000554:	4d0c      	ldr	r5, [pc, #48]	; (8000588 <__libc_init_array+0x38>)
 8000556:	4c0d      	ldr	r4, [pc, #52]	; (800058c <__libc_init_array+0x3c>)
 8000558:	1b64      	subs	r4, r4, r5
 800055a:	10a4      	asrs	r4, r4, #2
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	2600      	movs	r6, #0
 8000562:	f000 f819 	bl	8000598 <_init>
 8000566:	4d0a      	ldr	r5, [pc, #40]	; (8000590 <__libc_init_array+0x40>)
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <__libc_init_array+0x44>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	00b3      	lsls	r3, r6, #2
 8000576:	58eb      	ldr	r3, [r5, r3]
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	00b3      	lsls	r3, r6, #2
 8000580:	58eb      	ldr	r3, [r5, r3]
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005b0 	.word	0x080005b0
 800058c:	080005b0 	.word	0x080005b0
 8000590:	080005b0 	.word	0x080005b0
 8000594:	080005b4 	.word	0x080005b4

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
